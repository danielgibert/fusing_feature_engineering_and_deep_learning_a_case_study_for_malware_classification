import tensorflow as tf

class ImgCNN(tf.keras.Model):
    def __init__(self, parameters):
        super(ImgCNN, self).__init__()
        self.parameters = parameters
        self.rescaler = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)

    def build(self, input_shapes):
        self.conv_1 = tf.keras.layers.Conv2D(self.parameters['conv']['num_filters'][0],
                                             (self.parameters['conv']['size'][0], self.parameters['conv']['size'][0]),
                                             activation="relu")
        self.max_pooling_1 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))

        self.conv_2 = tf.keras.layers.Conv2D(self.parameters['conv']['num_filters'][1],
                                             (self.parameters['conv']['size'][1], self.parameters['conv']['size'][1]),
                                             activation="relu")
        self.max_pooling_2 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))

        self.conv_3 = tf.keras.layers.Conv2D(self.parameters['conv']['num_filters'][2],
                                             (self.parameters['conv']['size'][2], self.parameters['conv']['size'][2]),
                                             activation="relu")
        self.max_pooling_3 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))

        self.dense_dropout_1 = tf.keras.layers.Dropout(0.5)
        self.dense_layer_1 = tf.keras.layers.Dense(self.parameters['hidden'][0], activation='relu')
        #self.dense_dropout_2 = tf.keras.layers.Dropout(0.5)
        #self.dense_layer_2 = tf.keras.layers.Dense(self.parameters['hidden'][1], activation='relu')
        self.dense_dropout_output = tf.keras.layers.Dropout(0.5)
        self.output_layer = tf.keras.layers.Dense(self.parameters['output'], activation='softmax')



    def call(self, input_tensor, training=False):
        input_tensor = self.rescaler(input_tensor)
        #print("Input: {}; {}".format(input_tensor, input_tensor.shape))
        img_expanded = tf.keras.backend.expand_dims(input_tensor, axis=-1)
        #print("Input expanded: {}; {}".format(img_expanded, img_expanded.shape))

        conv_1 = self.conv_1(img_expanded)
        #print("Conv 1: {}".format(conv_1.shape))
        pool_1 = self.max_pooling_1(conv_1)

        conv_2 = self.conv_2(pool_1)
        #print("Conv 2: {}".format(conv_2.shape))
        pool_2 = self.max_pooling_2(conv_2)


        conv_3 = self.conv_3(pool_2)
        #print("Conv 3: {}".format(conv_3.shape))
        pool_3 = self.max_pooling_3(conv_3)
        #print("Pool 3: {}".format(pool_3.shape))

        #global_avg_pooling = self.global_average_pooling(conv_3)
        #global_max_pooling = self.global_max_pooling(conv_3)
        #features = tf.keras.layers.concatenate([global_avg_pooling, global_max_pooling])

        features = tf.reshape(pool_3, shape=[-1, int(pool_3.shape[1]) * int(pool_3.shape[2]) * int(pool_3.shape[3])])

        dropout_1 = self.dense_dropout_1(features, training=training)
        dense_1 = self.dense_layer_1(dropout_1)
        #print("Dense 1: {}".format(dense_1.shape))

        #dropout_2 = self.dense_dropout_2(dense_1, training=training)
        #dense_2 = self.dense_layer_2(dropout_2)
        #print("Dense 2: {}".format(dense_2.shape))

        dropout_output = self.dense_dropout_output(dense_1, training=training)
        out = self.output_layer(dropout_output)
        return out

    def extract_features(self, input_tensor):
        input_tensor = self.rescaler(input_tensor)
        # print("Input: {}; {}".format(input_tensor, input_tensor.shape))
        img_expanded = tf.keras.backend.expand_dims(input_tensor, axis=-1)
        # print("Input expanded: {}; {}".format(img_expanded, img_expanded.shape))

        conv_1 = self.conv_1(img_expanded)
        # print("Conv 1: {}".format(conv_1.shape))
        pool_1 = self.max_pooling_1(conv_1)

        conv_2 = self.conv_2(pool_1)
        # print("Conv 2: {}".format(conv_2.shape))
        pool_2 = self.max_pooling_2(conv_2)

        conv_3 = self.conv_3(pool_2)
        # print("Conv 3: {}".format(conv_3.shape))
        pool_3 = self.max_pooling_3(conv_3)

        features = tf.reshape(pool_3, shape=[-1, int(pool_3.shape[1]) * int(pool_3.shape[2]) * int(pool_3.shape[3])])
        dense_1 = self.dense_layer_1(features)

        return dense_1


