import argparse
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def show_values_on_bars(axs, h_v="v", space=0.4):
    def _show_on_single_plot(ax):
        if h_v == "v":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() / 2
                _y = p.get_y() + p.get_height()
                if type == "gain":
                    value = ("%.2f" % float(p.get_height()))
                else:
                    value = int(p.get_height())
                ax.text(_x, _y, value, ha="center")
        elif h_v == "h":
            for p in ax.patches:
                _x = p.get_x() + p.get_width() + float(space)
                _y = p.get_y() + p.get_height()
                if type == "gain":
                    value = ("%.2f" % float(p.get_width()))
                else:
                    value = int(p.get_width())
                ax.text(_x, _y, value, ha="left")

    if isinstance(axs, np.ndarray):
        for idx, ax in np.ndenumerate(axs):
            _show_on_single_plot(ax)
    else:
        _show_on_single_plot(axs)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("feature_importance_filepath", help="Feature importance filepath", type=str)
    parser.add_argument("output_filepath", help="Output filepath", type=str)
    parser.add_argument("weight", help="Weight type", type=str)

    args = parser.parse_args()

    df = pd.read_csv(args.feature_importance_filepath)
    prefixes = ["ASM_MD",
                "ASM_SYMBOLS",
                "ASM_1GRAM_OPCODES",
                "ASM_REG",
                "ASM_API",
                "ASM_MISC",
                "ASM_SECTION",
                "ASM_DD",
                "ASM_PIXEL",
                "Byte_MD",
                "BYTE_1GRAM",
                "BYTE_ENT",
                "BYTE_IMG_Haralick",
                "BYTE_IMG_lbp",
                "ASM_CNN_Opcodes",
                "BYTE_CNN",
                "BYTE_CNN_Entropy",
                "BYTE_CNN_IMG"]
    total_count = [0]*len(prefixes)

    feature_names = list(df["Feature_name"].tolist())
    values = list(df["Value"].tolist())


    for i in range(len(prefixes)):
        for j in range(len(feature_names)):
            if prefixes[i] in feature_names[j]:
                total_count[i] += values[j]

    keys = prefixes
    values = np.array(total_count)
    sorted_idx = values.argsort()
    sorted_keys = [keys[idx] for idx in sorted_idx]

    data = pd.DataFrame()
    data["Feature category "] = sorted_keys
    data["Importance"] = values[sorted_idx]
    ax = sns.barplot(x=values[sorted_idx], y=sorted_keys)
    show_values_on_bars(ax, "h", 0.3)
    ax.set(xlabel=args.weight, ylabel='Feature')
    plt.xlabel("Importance", size=14)
    plt.ylabel("Feature", size=14)
    plt.savefig(args.output_filepath, bbox_inches='tight')






