import xgboost as xgb
import argparse
import pandas as pd

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("testing_filepath", help="CSV containing the features of the test samples", type=str)
    parser.add_argument("test_ids", help="File containing the ids of the test CSV", type=str)
    parser.add_argument("xgb_model_filepath", help="Filepath of the XGBoost model", type=str)
    parser.add_argument("output_filepath", help="Output filepath containing the predictions", type=str)
    args = parser.parse_args()

    df = pd.read_csv(args.testing_filepath)
    dtest = xgb.DMatrix(df)


    bst = xgb.Booster({'nthread': 4})  # init model
    bst.load_model('models/0001.model')  # load data
    ypred = bst.predict(dtest)

    df = pd.DataFrame()
    print(df.head())


    test_ids_df = pd.read_csv(args.test_ids)
    test_ids = test_ids_df['Id'].values

    df["Id"] = test_ids
    print(df.head())
    for i in range(1,10):
        df["Prediction{}".format(i)] = ["%.16f" % round(row[i-1], 16) for row in ypred]
    print(df.head())
    df.to_csv(args.output_filepath, index=False, columns=["Id", "Prediction1", "Prediction2", "Prediction3", "Prediction4",
                                             "Prediction5", "Prediction6", "Prediction7", "Prediction8", "Prediction9"])
    #for i in range(len(ypred)):
        #print(test_ids[i], ypred[i])
    #print(len(test_ids), len(ypred))
