import os
import csv
import argparse
from pe_parser.hexadecimal_parser import HexParser


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--train', dest='train', action='store_true')
    parser.add_argument('--no-train', dest='train', action='store_false')
    parser.set_defaults(train=True)
    args = parser.parse_args()

    if args.train is True:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/hexadecimal/train/"
        output_filepath = "../../data/feature_files/train/byte_unigram_features.csv"
    else:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/hexadecimal/test/"
        output_filepath = "../../data/feature_files/test/byte_unigram_features.csv"

    fieldnames = ['Id', 'BYTE_1GRAM_00', 'BYTE_1GRAM_01', 'BYTE_1GRAM_02', 'BYTE_1GRAM_03', 'BYTE_1GRAM_04',
                  'BYTE_1GRAM_05', 'BYTE_1GRAM_06', 'BYTE_1GRAM_07', 'BYTE_1GRAM_08', 'BYTE_1GRAM_09', 'BYTE_1GRAM_0A',
                  'BYTE_1GRAM_0B', 'BYTE_1GRAM_0C', 'BYTE_1GRAM_0D', 'BYTE_1GRAM_0E', 'BYTE_1GRAM_0F', 'BYTE_1GRAM_11',
                  'BYTE_1GRAM_12', 'BYTE_1GRAM_13', 'BYTE_1GRAM_14', 'BYTE_1GRAM_15', 'BYTE_1GRAM_16', 'BYTE_1GRAM_17',
                  'BYTE_1GRAM_18', 'BYTE_1GRAM_19', 'BYTE_1GRAM_1A', 'BYTE_1GRAM_1B', 'BYTE_1GRAM_1C', 'BYTE_1GRAM_1D',
                  'BYTE_1GRAM_1E', 'BYTE_1GRAM_1F', 'BYTE_1GRAM_20', 'BYTE_1GRAM_21', 'BYTE_1GRAM_22', 'BYTE_1GRAM_23',
                  'BYTE_1GRAM_24', 'BYTE_1GRAM_25', 'BYTE_1GRAM_26', 'BYTE_1GRAM_27', 'BYTE_1GRAM_28', 'BYTE_1GRAM_29',
                  'BYTE_1GRAM_2A', 'BYTE_1GRAM_2B', 'BYTE_1GRAM_2C', 'BYTE_1GRAM_2D', 'BYTE_1GRAM_2E', 'BYTE_1GRAM_2F',
                  'BYTE_1GRAM_30', 'BYTE_1GRAM_31', 'BYTE_1GRAM_32', 'BYTE_1GRAM_33', 'BYTE_1GRAM_34', 'BYTE_1GRAM_35',
                  'BYTE_1GRAM_36', 'BYTE_1GRAM_37', 'BYTE_1GRAM_38', 'BYTE_1GRAM_39', 'BYTE_1GRAM_3A', 'BYTE_1GRAM_3B',
                  'BYTE_1GRAM_3C', 'BYTE_1GRAM_3D', 'BYTE_1GRAM_3E', 'BYTE_1GRAM_3F', 'BYTE_1GRAM_40', 'BYTE_1GRAM_41',
                  'BYTE_1GRAM_42', 'BYTE_1GRAM_43', 'BYTE_1GRAM_44', 'BYTE_1GRAM_45', 'BYTE_1GRAM_46', 'BYTE_1GRAM_47',
                  'BYTE_1GRAM_48', 'BYTE_1GRAM_49', 'BYTE_1GRAM_4A', 'BYTE_1GRAM_4B', 'BYTE_1GRAM_4C', 'BYTE_1GRAM_4D',
                  'BYTE_1GRAM_4E', 'BYTE_1GRAM_4F', 'BYTE_1GRAM_50', 'BYTE_1GRAM_51', 'BYTE_1GRAM_52', 'BYTE_1GRAM_53',
                  'BYTE_1GRAM_54', 'BYTE_1GRAM_55', 'BYTE_1GRAM_56', 'BYTE_1GRAM_57', 'BYTE_1GRAM_58', 'BYTE_1GRAM_59',
                  'BYTE_1GRAM_5A', 'BYTE_1GRAM_5B', 'BYTE_1GRAM_5C', 'BYTE_1GRAM_5D', 'BYTE_1GRAM_5E', 'BYTE_1GRAM_5F',
                  'BYTE_1GRAM_60', 'BYTE_1GRAM_61', 'BYTE_1GRAM_62', 'BYTE_1GRAM_63', 'BYTE_1GRAM_64', 'BYTE_1GRAM_65',
                  'BYTE_1GRAM_66', 'BYTE_1GRAM_67', 'BYTE_1GRAM_68', 'BYTE_1GRAM_69', 'BYTE_1GRAM_6A', 'BYTE_1GRAM_6B',
                  'BYTE_1GRAM_6C', 'BYTE_1GRAM_6D', 'BYTE_1GRAM_6E', 'BYTE_1GRAM_6F', 'BYTE_1GRAM_70', 'BYTE_1GRAM_71',
                  'BYTE_1GRAM_72', 'BYTE_1GRAM_73', 'BYTE_1GRAM_74', 'BYTE_1GRAM_75', 'BYTE_1GRAM_76', 'BYTE_1GRAM_77',
                  'BYTE_1GRAM_78', 'BYTE_1GRAM_79', 'BYTE_1GRAM_7A', 'BYTE_1GRAM_7B', 'BYTE_1GRAM_7C', 'BYTE_1GRAM_7D',
                  'BYTE_1GRAM_7E', 'BYTE_1GRAM_7F', 'BYTE_1GRAM_80', 'BYTE_1GRAM_81', 'BYTE_1GRAM_82', 'BYTE_1GRAM_83',
                  'BYTE_1GRAM_84', 'BYTE_1GRAM_85', 'BYTE_1GRAM_86', 'BYTE_1GRAM_87', 'BYTE_1GRAM_88', 'BYTE_1GRAM_89',
                  'BYTE_1GRAM_8A', 'BYTE_1GRAM_8B', 'BYTE_1GRAM_8C', 'BYTE_1GRAM_8D', 'BYTE_1GRAM_8E', 'BYTE_1GRAM_8F',
                  'BYTE_1GRAM_90', 'BYTE_1GRAM_91', 'BYTE_1GRAM_92', 'BYTE_1GRAM_93', 'BYTE_1GRAM_94', 'BYTE_1GRAM_95',
                  'BYTE_1GRAM_96', 'BYTE_1GRAM_97', 'BYTE_1GRAM_98', 'BYTE_1GRAM_99', 'BYTE_1GRAM_9A', 'BYTE_1GRAM_9B',
                  'BYTE_1GRAM_9C', 'BYTE_1GRAM_9D', 'BYTE_1GRAM_9E', 'BYTE_1GRAM_9F', 'BYTE_1GRAM_A0', 'BYTE_1GRAM_A1',
                  'BYTE_1GRAM_A2', 'BYTE_1GRAM_A3', 'BYTE_1GRAM_A4', 'BYTE_1GRAM_A5', 'BYTE_1GRAM_A6', 'BYTE_1GRAM_A7',
                  'BYTE_1GRAM_A8', 'BYTE_1GRAM_A9', 'BYTE_1GRAM_AA', 'BYTE_1GRAM_AB', 'BYTE_1GRAM_AC', 'BYTE_1GRAM_AD',
                  'BYTE_1GRAM_AE', 'BYTE_1GRAM_AF', 'BYTE_1GRAM_B0', 'BYTE_1GRAM_B1', 'BYTE_1GRAM_B2', 'BYTE_1GRAM_B3',
                  'BYTE_1GRAM_B4', 'BYTE_1GRAM_B5', 'BYTE_1GRAM_B6', 'BYTE_1GRAM_B7', 'BYTE_1GRAM_B8', 'BYTE_1GRAM_B9',
                  'BYTE_1GRAM_BA', 'BYTE_1GRAM_BB', 'BYTE_1GRAM_BC', 'BYTE_1GRAM_BD', 'BYTE_1GRAM_BE', 'BYTE_1GRAM_BF',
                  'BYTE_1GRAM_C0', 'BYTE_1GRAM_C1', 'BYTE_1GRAM_C2', 'BYTE_1GRAM_C3', 'BYTE_1GRAM_C4', 'BYTE_1GRAM_C5',
                  'BYTE_1GRAM_C6', 'BYTE_1GRAM_C7', 'BYTE_1GRAM_C8', 'BYTE_1GRAM_C9', 'BYTE_1GRAM_CA', 'BYTE_1GRAM_CB',
                  'BYTE_1GRAM_CC', 'BYTE_1GRAM_CD', 'BYTE_1GRAM_CE', 'BYTE_1GRAM_CF', 'BYTE_1GRAM_D0', 'BYTE_1GRAM_D1',
                  'BYTE_1GRAM_D2', 'BYTE_1GRAM_D3', 'BYTE_1GRAM_D4', 'BYTE_1GRAM_D5', 'BYTE_1GRAM_D6', 'BYTE_1GRAM_D7',
                  'BYTE_1GRAM_D8', 'BYTE_1GRAM_D9', 'BYTE_1GRAM_DA', 'BYTE_1GRAM_DB', 'BYTE_1GRAM_DC', 'BYTE_1GRAM_DD',
                  'BYTE_1GRAM_DE', 'BYTE_1GRAM_DF', 'BYTE_1GRAM_E0', 'BYTE_1GRAM_E1', 'BYTE_1GRAM_E2', 'BYTE_1GRAM_E3',
                  'BYTE_1GRAM_E4', 'BYTE_1GRAM_E5', 'BYTE_1GRAM_E6', 'BYTE_1GRAM_E7', 'BYTE_1GRAM_E8', 'BYTE_1GRAM_E9',
                  'BYTE_1GRAM_EA', 'BYTE_1GRAM_EB', 'BYTE_1GRAM_EC', 'BYTE_1GRAM_ED', 'BYTE_1GRAM_EE', 'BYTE_1GRAM_EF',
                  'BYTE_1GRAM_F0', 'BYTE_1GRAM_F1', 'BYTE_1GRAM_F2', 'BYTE_1GRAM_F3', 'BYTE_1GRAM_F4', 'BYTE_1GRAM_F5',
                  'BYTE_1GRAM_F6', 'BYTE_1GRAM_F7', 'BYTE_1GRAM_F8', 'BYTE_1GRAM_F9', 'BYTE_1GRAM_FA', 'BYTE_1GRAM_FB',
                  'BYTE_1GRAM_FC', 'BYTE_1GRAM_FD', 'BYTE_1GRAM_FE', 'BYTE_1GRAM_FF']

    with open(output_filepath, "w") as output_file:
        writer = csv.DictWriter(output_file, fieldnames=fieldnames)
        writer.writeheader()
        i = 0
        filenames = os.listdir(pe_filepath)
        for filename in filenames:
            hex_parser = HexParser()
            print("{};{}".format(i,pe_filepath+filename))
            hex_parser.load_hexadecimal_file(pe_filepath+filename)
            hex_values = hex_parser.extract_hex_values()
            byte_unigram_features = hex_parser.extract_byte_unigram_features()

            byte_unigram_features['Id'] = filename[:-6]
            writer.writerow({feature_name: byte_unigram_features[feature_name] for feature_name in fieldnames})
            i+=1