import os
import csv
import argparse
from pe_parser.hexadecimal_parser import HexParser


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--train', dest='train', action='store_true')
    parser.add_argument('--no-train', dest='train', action='store_false')
    parser.set_defaults(train=True)
    args = parser.parse_args()

    if args.train is True:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/hexadecimal/train/"
        output_filepath = "../../data/feature_files/train/byte_entropy_features.csv"
    else:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/hexadecimal/test/"
        output_filepath = "../../data/feature_files/test/byte_entropy_features.csv"

    fieldnames = ['Id', 'BYTE_ENT_mean', 'BYTE_ENT_variance', 'BYTE_ENT_median', 'BYTE_ENT_max', 'BYTE_ENT_min',
                  'BYTE_ENT_Quantile_1th', 'BYTE_ENT_Quantile_2th', 'BYTE_ENT_Quantile_3th', 'BYTE_ENT_Quantile_4th',
                  'BYTE_ENT_Quantile_5th', 'BYTE_ENT_Quantile_6th', 'BYTE_ENT_Quantile_7th', 'BYTE_ENT_Quantile_8th',
                  'BYTE_ENT_Quantile_9th', 'BYTE_ENT_Quantile_10th', 'BYTE_ENT_Quantile_11th', 'BYTE_ENT_Quantile_12th',
                  'BYTE_ENT_Quantile_13th', 'BYTE_ENT_Quantile_14th', 'BYTE_ENT_Quantile_15th',
                  'BYTE_ENT_Quantile_16th', 'BYTE_ENT_Quantile_17th', 'BYTE_ENT_Quantile_18th',
                  'BYTE_ENT_Quantile_19th', 'BYTE_ENT_Quantile_20th', 'BYTE_ENT_Quantile_21th',
                  'BYTE_ENT_Quantile_22th', 'BYTE_ENT_Quantile_23th', 'BYTE_ENT_Quantile_24th',
                  'BYTE_ENT_Quantile_25th', 'BYTE_ENT_Quantile_26th', 'BYTE_ENT_Quantile_27th',
                  'BYTE_ENT_Quantile_28th', 'BYTE_ENT_Quantile_30th', 'BYTE_ENT_Quantile_31th',
                  'BYTE_ENT_Quantile_32th', 'BYTE_ENT_Quantile_33th', 'BYTE_ENT_Quantile_34th',
                  'BYTE_ENT_Quantile_35th', 'BYTE_ENT_Quantile_36th', 'BYTE_ENT_Quantile_37th',
                  'BYTE_ENT_Quantile_38th', 'BYTE_ENT_Quantile_39th', 'BYTE_ENT_Quantile_40th',
                  'BYTE_ENT_Quantile_41th', 'BYTE_ENT_Quantile_42th', 'BYTE_ENT_Quantile_43th',
                  'BYTE_ENT_Quantile_44th', 'BYTE_ENT_Quantile_45th', 'BYTE_ENT_Quantile_46th',
                  'BYTE_ENT_Quantile_47th', 'BYTE_ENT_Quantile_48th', 'BYTE_ENT_Quantile_49th',
                  'BYTE_ENT_Quantile_50th', 'BYTE_ENT_Quantile_51th', 'BYTE_ENT_Quantile_52th',
                  'BYTE_ENT_Quantile_53th', 'BYTE_ENT_Quantile_54th', 'BYTE_ENT_Quantile_55th',
                  'BYTE_ENT_Quantile_56th', 'BYTE_ENT_Quantile_57th', 'BYTE_ENT_Quantile_59th',
                  'BYTE_ENT_Quantile_60th', 'BYTE_ENT_Quantile_61th', 'BYTE_ENT_Quantile_62th',
                  'BYTE_ENT_Quantile_63th', 'BYTE_ENT_Quantile_64th', 'BYTE_ENT_Quantile_65th',
                  'BYTE_ENT_Quantile_66th', 'BYTE_ENT_Quantile_67th', 'BYTE_ENT_Quantile_68th',
                  'BYTE_ENT_Quantile_69th', 'BYTE_ENT_Quantile_70th', 'BYTE_ENT_Quantile_71th',
                  'BYTE_ENT_Quantile_72th', 'BYTE_ENT_Quantile_73th', 'BYTE_ENT_Quantile_74th',
                  'BYTE_ENT_Quantile_75th', 'BYTE_ENT_Quantile_76th', 'BYTE_ENT_Quantile_77th',
                  'BYTE_ENT_Quantile_78th', 'BYTE_ENT_Quantile_79th', 'BYTE_ENT_Quantile_80th',
                  'BYTE_ENT_Quantile_81th', 'BYTE_ENT_Quantile_82th', 'BYTE_ENT_Quantile_83th',
                  'BYTE_ENT_Quantile_84th', 'BYTE_ENT_Quantile_85th', 'BYTE_ENT_Quantile_86th',
                  'BYTE_ENT_Quantile_87th', 'BYTE_ENT_Quantile_88th', 'BYTE_ENT_Quantile_89th',
                  'BYTE_ENT_Quantile_90th', 'BYTE_ENT_Quantile_91th', 'BYTE_ENT_Quantile_92th',
                  'BYTE_ENT_Quantile_93th', 'BYTE_ENT_Quantile_94th', 'BYTE_ENT_Quantile_95th',
                  'BYTE_ENT_Quantile_96th', 'BYTE_ENT_Quantile_97th', 'BYTE_ENT_Quantile_98th',
                  'BYTE_ENT_Quantile_99th', 'BYTE_ENT_Quantile_100th']


    with open(output_filepath, "w") as output_file:
        writer = csv.DictWriter(output_file, fieldnames=fieldnames)
        writer.writeheader()
        i = 0
        filenames = os.listdir(pe_filepath)
        for filename in filenames:
            hex_parser = HexParser()
            print("{};{}".format(i,pe_filepath+filename))
            hex_parser.load_hexadecimal_file(pe_filepath+filename)
            hex_values = hex_parser.extract_hex_values()
            byte_entropy_features = hex_parser.extract_entropy_features(hex_values, 1024)

            byte_entropy_features['Id'] = filename[:-6]
            writer.writerow({feature_name: byte_entropy_features[feature_name] for feature_name in fieldnames})
            i+=1