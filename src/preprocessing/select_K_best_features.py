import argparse
import pandas as pd
from sklearn.feature_selection import SelectKBest, chi2, f_classif, mutual_info_classif
import numpy as np
from sklearn.preprocessing import MinMaxScaler
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input_filepath", help="CSV input filepath. With features and the label", type=str)
    parser.add_argument("output_filepath", help="CSV containing the features of the training samples", type=str)
    parser.add_argument("n_features", help="K best features", type=int)

    parser.add_argument('--chi2', dest='chi2', action='store_true')
    parser.add_argument('--no-chi2', dest='chi2', action='store_false')
    parser.set_defaults(chi2=False)

    parser.add_argument('--anova', dest='anova', action='store_true')
    parser.add_argument('--no-anova', dest='anova', action='store_false')
    parser.set_defaults(anova=False)

    parser.add_argument('--mutual', dest='mutual', action='store_true')
    parser.add_argument('--no-mutual', dest='mutual', action='store_false')
    parser.set_defaults(mutual=False)

    args = parser.parse_args()

    # Three feature selection metrics
    # Chi-squared stats of non-negative features for classification tasks.
    # ANOVA F-value between label/feature for classification tasks.
    # Mutual information for a discrete target.
    df = pd.read_csv(args.input_filepath)
    y = df[['Class']].copy()

    y_ = df['Class']
    Id_ = df["Id"]

    X = df.drop(columns=["Id", "Class"])
    #X = X.astype(float)
    #X = X.to_numpy(dtype=np.float64, copy=True)
    #y = y.to_numpy(dtype=np.int64, copy=True)
    #y = np.reshape(y, (X.shape[0],))
    #print(X.shape, type(X), X.dtype, y.shape, type(y), y.dtype)

    #y = np.reshape(y, (X.shape[0],))
    #print(X.shape, type(X), X.dtype)
    #print(y.shape, type(y), y.dtype)
    #print(X[-1], y[-1])

    columns = list(X.columns)
    if args.chi2 is True:
        # MinMaxScale values before SelectKBest
        min_max_scaler = MinMaxScaler()
        X_scaled = X.copy()
        X_scaled[columns] = min_max_scaler.fit_transform(X[columns])
        #print(X_scaled)

        selector = SelectKBest(score_func=chi2, k=args.n_features)
        selector.fit(X_scaled, y)
    elif args.anova is True:
        selector = SelectKBest(score_func=f_classif, k=args.n_features)
        selector.fit(X, y)

    elif args.mutual is True:
        selector = SelectKBest(score_func=mutual_info_classif, k=args.n_features)
        selector.fit(X, y)

    else:
        print("No feature selection algorithm selected")

    cols = selector.get_support(indices=True)
    print("Columns: {}".format(cols))

    features_df_new = X.iloc[:, cols]
    print(features_df_new.columns)
    with open(args.output_filepath, "w") as output_file:
        output_file.write(",".join(list(features_df_new.columns)))

