import os
import csv
import argparse
from pe_parser.asm_parser import AssemblyParser


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--train', dest='train', action='store_true')
    parser.add_argument('--no-train', dest='train', action='store_false')
    parser.set_defaults(train=True)
    args = parser.parse_args()

    if args.train is True:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/asm/raw/train/"
        output_filepath = "../../data/feature_files/train/asm_opcode_features.csv"
    else:
        pe_filepath = "/mnt/hdd1/cerberus_mlw_data/asm/raw/test/"
        output_filepath = "../../data/feature_files/test/asm_opcode_features.csv"

    fieldnames = ['Id', 'ASM_1GRAM_OPCODES_add', 'ASM_1GRAM_OPCODES_al', 'ASM_1GRAM_OPCODES_bt',
                  'ASM_1GRAM_OPCODES_call', 'ASM_1GRAM_OPCODES_cdq', 'ASM_1GRAM_OPCODES_cld', 'ASM_1GRAM_OPCODES_cli',
                  'ASM_1GRAM_OPCODES_cmc', 'ASM_1GRAM_OPCODES_cmp', 'ASM_1GRAM_OPCODES_const', 'ASM_1GRAM_OPCODES_cwd',
                  'ASM_1GRAM_OPCODES_daa', 'ASM_1GRAM_OPCODES_db', 'ASM_1GRAM_OPCODES_dd', 'ASM_1GRAM_OPCODES_dec',
                  'ASM_1GRAM_OPCODES_dw', 'ASM_1GRAM_OPCODES_endp', 'ASM_1GRAM_OPCODES_ends', 'ASM_1GRAM_OPCODES_faddp',
                  'ASM_1GRAM_OPCODES_fchs', 'ASM_1GRAM_OPCODES_fdiv', 'ASM_1GRAM_OPCODES_fdivp',
                  'ASM_1GRAM_OPCODES_fdivr', 'ASM_1GRAM_OPCODES_fild', 'ASM_1GRAM_OPCODES_fistp',
                  'ASM_1GRAM_OPCODES_fld', 'ASM_1GRAM_OPCODES_fstcw', 'ASM_1GRAM_OPCODES_fstcwimul',
                  'ASM_1GRAM_OPCODES_fstp', 'ASM_1GRAM_OPCODES_fword', 'ASM_1GRAM_OPCODES_fxch',
                  'ASM_1GRAM_OPCODES_imul', 'ASM_1GRAM_OPCODES_in', 'ASM_1GRAM_OPCODES_inc', 'ASM_1GRAM_OPCODES_ins',
                  'ASM_1GRAM_OPCODES_int', 'ASM_1GRAM_OPCODES_jb', 'ASM_1GRAM_OPCODES_je', 'ASM_1GRAM_OPCODES_jg',
                  'ASM_1GRAM_OPCODES_jge', 'ASM_1GRAM_OPCODES_jl', 'ASM_1GRAM_OPCODES_jmp', 'ASM_1GRAM_OPCODES_jnb',
                  'ASM_1GRAM_OPCODES_jno', 'ASM_1GRAM_OPCODES_jnz', 'ASM_1GRAM_OPCODES_jo', 'ASM_1GRAM_OPCODES_jz',
                  'ASM_1GRAM_OPCODES_lea', 'ASM_1GRAM_OPCODES_loope', 'ASM_1GRAM_OPCODES_mov',
                  'ASM_1GRAM_OPCODES_movzx', 'ASM_1GRAM_OPCODES_mul', 'ASM_1GRAM_OPCODES_near', 'ASM_1GRAM_OPCODES_neg',
                  'ASM_1GRAM_OPCODES_not', 'ASM_1GRAM_OPCODES_or', 'ASM_1GRAM_OPCODES_out', 'ASM_1GRAM_OPCODES_outs',
                  'ASM_1GRAM_OPCODES_pop', 'ASM_1GRAM_OPCODES_popf', 'ASM_1GRAM_OPCODES_proc', 'ASM_1GRAM_OPCODES_push',
                  'ASM_1GRAM_OPCODES_pushf', 'ASM_1GRAM_OPCODES_rcl', 'ASM_1GRAM_OPCODES_rcr',
                  'ASM_1GRAM_OPCODES_rdtsc', 'ASM_1GRAM_OPCODES_rep', 'ASM_1GRAM_OPCODES_ret', 'ASM_1GRAM_OPCODES_retn',
                  'ASM_1GRAM_OPCODES_rol', 'ASM_1GRAM_OPCODES_ror', 'ASM_1GRAM_OPCODES_sal', 'ASM_1GRAM_OPCODES_sar',
                  'ASM_1GRAM_OPCODES_sbb', 'ASM_1GRAM_OPCODES_scas', 'ASM_1GRAM_OPCODES_setb',
                  'ASM_1GRAM_OPCODES_setle', 'ASM_1GRAM_OPCODES_setnle', 'ASM_1GRAM_OPCODES_setnz',
                  'ASM_1GRAM_OPCODES_setz', 'ASM_1GRAM_OPCODES_shl', 'ASM_1GRAM_OPCODES_shld', 'ASM_1GRAM_OPCODES_shr',
                  'ASM_1GRAM_OPCODES_sidt', 'ASM_1GRAM_OPCODES_stc', 'ASM_1GRAM_OPCODES_std', 'ASM_1GRAM_OPCODES_sti',
                  'ASM_1GRAM_OPCODES_stos', 'ASM_1GRAM_OPCODES_sub', 'ASM_1GRAM_OPCODES_test', 'ASM_1GRAM_OPCODES_wait',
                  'ASM_1GRAM_OPCODES_xchg', 'ASM_1GRAM_OPCODES_xor']

    with open(output_filepath, "w") as output_file:
        writer = csv.DictWriter(output_file, fieldnames=fieldnames)
        writer.writeheader()
        i = 0
        filenames = os.listdir(pe_filepath)
        for filename in filenames:
            asm_parser = AssemblyParser()
            print("{};{}".format(i,pe_filepath+filename))
            asm_parser.load_asm_file(pe_filepath+filename)
            opcode_features = asm_parser.extract_opcode_unigram_features()
            opcode_features['Id'] = filename[:-4]
            writer.writerow({feature_name: opcode_features[feature_name] for feature_name in fieldnames})
            i+=1