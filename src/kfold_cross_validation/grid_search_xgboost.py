from xgboost import XGBClassifier
import pandas as pd
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
from pe_parser.utils import load_parameters
import argparse


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("training_filepath", help="CSV containing the features of the training samples", type=str)
    parser.add_argument("hyperparameters_filepath", help="Hyperparameters filepath", type=str)
    parser.add_argument("output_filepath", help="output_filepath", type=str)
    parser.add_argument("K", help="Number of folds", type=int)
    args = parser.parse_args()

    params = load_parameters(args.hyperparameters_filepath)
    folds = args.K


    data = pd.read_csv(args.training_filepath)
    data['Class'] = data['Class'] - 1
    Y = data['Class']
    X = data.drop(['Class', 'Id'], axis=1)

    skf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)
    xgb = XGBClassifier(learning_rate=0.02, n_estimators=200, objective='multi:softprob',
                        silent=True, nthread=1)

    grid = GridSearchCV(estimator=xgb, param_grid=params, scoring='accuracy', n_jobs=4, cv=skf.split(X,Y), verbose=3 )
    grid.fit(X, Y)
    print('\n All results:')
    print(grid.cv_results_)
    print('\n Best estimator:')
    print(grid.best_estimator_)
    print('\n Best score:')
    print(grid.best_score_ * 2 - 1)
    print('\n Best parameters:')
    print(grid.best_params_)
    results = pd.DataFrame(grid.cv_results_)
    results.to_csv(args.output_filepath, index=False)