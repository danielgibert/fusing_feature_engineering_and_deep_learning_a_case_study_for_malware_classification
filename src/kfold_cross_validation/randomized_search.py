import pandas as pd
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import StratifiedKFold
from xgboost import XGBClassifier
import argparse
from pe_parser.utils import load_parameters


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("training_filepath", help="CSV containing the features of the training samples", type=str)
    parser.add_argument("hyperparameters_filepath", help="Hyperparameters filepath", type=str)
    parser.add_argument("output_filepath", help="output_filepath", type=str)
    parser.add_argument("K", help="Number of folds", type=int)
    args = parser.parse_args()

    hyperparameters = load_parameters(args.hyperparameters_filepath)

    xgb = XGBClassifier(n_estimators=200, objective='multi:softprob', nthread=1, use_label_encoder=False, eval_metric=["mlogloss", "merror"])

    data = pd.read_csv(args.training_filepath)
    data['Class'] = data['Class'] - 1
    y = data['Class']
    X = data.drop(['Class', 'Id'], axis=1)

    folds = args.K
    param_comb = 30

    skf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)

    random_search = RandomizedSearchCV(xgb, param_distributions=hyperparameters, n_iter=param_comb, scoring='neg_log_loss',
                                       n_jobs=4, cv=skf.split(X, y), verbose=3, random_state=1001)
    random_search.fit(X, y)

    print('\n All results:')
    print(random_search.cv_results_)
    print('\n Best estimator:')
    print(random_search.best_estimator_)
    print('\n Best normalized gini score for %d-fold search with %d parameter combinations:' % (folds, param_comb))
    print(random_search.best_score_ * 2 - 1)
    print('\n Best hyperparameters:')
    print(random_search.best_params_)
    results = pd.DataFrame(random_search.cv_results_)
    results.to_csv(args.output_filepath, index=False)